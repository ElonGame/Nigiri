// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Readable/Writable texture for storing the direct lighting and the occupied flag
RWTexture3D<float4>			voxelGrid;

RWStructuredBuffer<float>   voxelUpdateCounter;

// Texture for storing the color with direct lighting
Texture2D<float4>			lightingTexture;

Texture2D<float4>			lightMapTexture;

// Texture for storing the world space position
Texture2D<float4>			positionTexture;

Texture2D<float4>			NoiseTexture;

// Variable representing the dimension of the voxel grid
uint						voxelResolution;

uint f0;

// World-space boundary of the voxel grid
float 						worldVolumeBoundary;

// Function to get position of voxel in the grid
inline uint3 GetVoxelPosition(float3 worldPosition)
{
	float3 encodedPosition = worldPosition / worldVolumeBoundary;
	encodedPosition += float3(1.0f, 1.0f, 1.0f);
	encodedPosition /= 2.0f;
	uint3 voxelPosition = (uint3)(encodedPosition * voxelResolution);
	return voxelPosition;
}

[numthreads(16, 16, 1)]
// Entry point of the voxelization compute shader
void CSMain(uint3 id : SV_DispatchThreadID)
{
	float3 noiseCoord = NoiseTexture[id.xy].rgb;


	// Color of the current voxel with lighting
	float4 lightingColor = lightingTexture[id.xy];

	float4 lightMapColor = lightMapTexture[id.xy];

	// World space position
	float3 worldPosition = positionTexture[id.xy].rgb;

	// Extract the pixel's depth
	float lindepth = positionTexture[id.xy].a;

	uint3 voxelPosition = GetVoxelPosition(worldPosition);

	double index = id.x * 256 + id.y;
	voxelUpdateCounter[index] = voxelUpdateCounter[1] + 0.01;

	// Inject the current voxel's information into the grid
	if (((lindepth < voxelGrid[voxelPosition].a) && (lindepth > 0.01f)) || (voxelGrid[voxelPosition].a == 0.0f))
	{
		float4 oldColor = voxelGrid[voxelPosition];
		if (oldColor.r == 0 && oldColor.g == 0 && oldColor.b == 0) voxelGrid[voxelPosition] = float4(lightingColor.rgb + lightMapColor, lindepth);
		else voxelGrid[voxelPosition] = lerp(float4(lightingColor.rgb, lindepth), oldColor, 0.995);
	}
	else if ((voxelUpdateCounter[index] > lindepth + noiseCoord.x) && (lindepth < 0.999f))
	{
		float4 oldColor = voxelGrid[voxelPosition];
		voxelGrid[voxelPosition] = lerp(float4(lightingColor.rgb, lindepth), oldColor, 0.995);
		voxelUpdateCounter[index] = 0;
	}
}