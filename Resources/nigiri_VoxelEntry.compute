#define LUMA_THRESHOLD_FACTOR 0.00001f // Higher = higher accuracy with higher flickering
#define LUMA_DEPTH_FACTOR 100.0f 	// Higher = lesser variation with depth
#define LUMA_FACTOR 1.9632107f

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

uniform RWTexture3D<float4>			voxelGrid;



//uniform Texture3D<float4>			voxelInjectionGrid;
uniform RWStructuredBuffer<uint>	lightMapBuffer;
RWStructuredBuffer<uint>	maskClearBuffer;

cbuffer cbSettings : register(b0)
{
	uniform int						injectionTextureResolutionX;
	uniform int						voxelStaggerSwitch0X;
	uniform int						voxelStaggerSwitch0Y;
	uniform int						voxelStaggerSwitch0Z;
	uniform int						nearestNeighbourPropagation;
	uniform uint					voxelResolution;
	uniform float 					worldVolumeBoundary;
	uniform float					shadowStrength;
	uniform float					sunLightInjection;
	uniform float					occlusionGain;
	uniform float					emissiveIntensity;

	uniform Texture2D<float4>			lightingTexture;
	uniform Texture2D<float4>			lightingTexture2;

	//uniform Texture2D<float4>			volumeLightTexture;

	uniform Texture2D<float4>			positionTexture;
	uniform Texture2D<float4>			orthographicPositionTexture;
	uniform Texture2D<float4>			depthTexture;
};



#define unity_ColorSpaceLuminance half4(0.0396819152, 0.458021790, 0.00609653955, 1.0)

float3 rgb2hsv(float3 c)
{
	float4 k = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	float4 p = lerp(float4(c.bg, k.wz), float4(c.gb, k.xy), step(c.b, c.g));
	float4 q = lerp(float4(p.xyw, c.r), float4(c.r, p.yzx), step(p.x, c.r));

	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;

	return float3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

float3 hsv2rgb(float3 c)
{
	float4 k = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	float3 p = abs(frac(c.xxx + k.xyz) * 6.0 - k.www);
	return c.z * lerp(k.xxx, saturate(p - k.xxx), c.y);
}

float4 DecodeRGBAuint(uint value)
{
	uint ai = value & 0x0000007F;
	uint vi = (value / 0x00000080) & 0x000007FF;
	uint si = (value / 0x00040000) & 0x0000007F;
	uint hi = value / 0x02000000;

	float h = float(hi) / 127.0;
	float s = float(si) / 127.0;
	float v = (float(vi) / 2047.0) * 10.0;
	float a = ai * 2.0;

	v = pow(v, 3.0);

	float3 color = hsv2rgb(float3(h, s, v));

	return float4(color.rgb, a);
}

uint EncodeRGBAuint(float4 color)
{
	//7[HHHHHHH] 7[SSSSSSS] 11[VVVVVVVVVVV] 7[AAAAAAAA]
	float3 hsv = rgb2hsv(color.rgb);
	hsv.z = pow(hsv.z, 1.0 / 3.0);

	uint result = 0;

	uint a = min(127, uint(color.a / 2.0));
	uint v = min(2047, uint((hsv.z / 10.0) * 2047));
	uint s = uint(hsv.y * 127);
	uint h = uint(hsv.x * 127);

	result += a;
	result += v * 0x00000080; // << 7
	result += s * 0x00040000; // << 18
	result += h * 0x02000000; // << 25

	return result;
}

// Function to get position of voxel in the grid
inline uint3 GetVoxelPosition(float3 worldPosition)
{
	float3 encodedPosition = worldPosition / worldVolumeBoundary;
	encodedPosition += float3(1.0f, 1.0f, 1.0f);
	encodedPosition /= 2.0f;
	uint3 voxelPosition = (uint3)(encodedPosition * voxelResolution);
	return voxelPosition;
}

inline uint3 coordinateFromLinearIndex(uint index, uint res)
{
	return uint3(
		floor(index / (res * res)),
		floor((index / res) % res),
		index % res);
}

inline uint3 index1dTo3d(int index1d)
{
	//int res = 256; // resolution of the voxel grid
	int logRes = 8; // the log of the resolution (just a performance optimisation this way)
	// LogRes: 16 = 4, 32 = 5, 64 = 6, 128 = 7, 256 = 8, 512 = 9, etc...

	return uint3(index1d >> (logRes << 1),
		(index1d >> logRes) & (voxelResolution - 1),
		index1d & (voxelResolution - 1));
}

uint threeD2oneD(float3 coord)
{
	return coord.z * (voxelResolution * voxelResolution) + (coord.y * voxelResolution) + coord.x;
}

inline float GetLuma(float3 inputColor)
{
	return ((inputColor.y * LUMA_FACTOR) + inputColor.x);
}

float rnd(uint2 x)
{
	int n = int(x.x * 40.0 + x.y * 6400.0);
	n = (n << 13) ^ n;
	return 1.0 - float((n * (n * n * 15731 + 789221) + \
		1376312589) & 0x7fffffff) / 1073741824.0;
}

// 0
[numthreads(16, 16, 1)]
void CSMain(uint3 id : SV_DispatchThreadID, uint thread : SV_GroupIndex)
{
	uint3 voxelPosition = GetVoxelPosition(positionTexture[id.xy].rgb);
	uint index = threeD2oneD(voxelPosition);

	float4 newMixedColor = (0).xxxx;
	if (nearestNeighbourPropagation == 1)
	{
		float4 mixedColor0 =
			(voxelGrid[float3(voxelPosition.x + 1, voxelPosition.y, voxelPosition.z)] +
				voxelGrid[float3(voxelPosition.x - 1, voxelPosition.y, voxelPosition.z)] +
				voxelGrid[float3(voxelPosition.x, voxelPosition.y + 1, voxelPosition.z)] +
				voxelGrid[float3(voxelPosition.x, voxelPosition.y - 1, voxelPosition.z)] +
				voxelGrid[float3(voxelPosition.x, voxelPosition.y, voxelPosition.z + 1)] +
				voxelGrid[float3(voxelPosition.x, voxelPosition.y, voxelPosition.z - 1)]) / 12;

		maskClearBuffer[threeD2oneD(float3(voxelPosition.x + 1, voxelPosition.y, voxelPosition.z))] = 1;
		maskClearBuffer[threeD2oneD(float3(voxelPosition.x, voxelPosition.y + 1, voxelPosition.z))] = 1;
		maskClearBuffer[threeD2oneD(float3(voxelPosition.x, voxelPosition.y - 1, voxelPosition.z))] = 1;
		maskClearBuffer[threeD2oneD(float3(voxelPosition.x + 1, voxelPosition.y, voxelPosition.z))] = 1;
		maskClearBuffer[threeD2oneD(float3(voxelPosition.x, voxelPosition.y, voxelPosition.z + 1))] = 1;
		maskClearBuffer[threeD2oneD(float3(voxelPosition.x, voxelPosition.y, voxelPosition.z - 1))] = 1;


		float4 mixedColor1 =
			(voxelGrid[float3(voxelPosition.x + 2, voxelPosition.y, voxelPosition.z)] +
				voxelGrid[float3(voxelPosition.x - 2, voxelPosition.y, voxelPosition.z)] +
				voxelGrid[float3(voxelPosition.x, voxelPosition.y + 2, voxelPosition.z)] +
				voxelGrid[float3(voxelPosition.x, voxelPosition.y - 2, voxelPosition.z)] +
				voxelGrid[float3(voxelPosition.x, voxelPosition.y, voxelPosition.z + 2)] +
				voxelGrid[float3(voxelPosition.x, voxelPosition.y, voxelPosition.z - 2)]) / 12;

		maskClearBuffer[threeD2oneD(float3(voxelPosition.x + 2, voxelPosition.y, voxelPosition.z))] = 1;
		maskClearBuffer[threeD2oneD(float3(voxelPosition.x, voxelPosition.y + 2, voxelPosition.z))] = 1;
		maskClearBuffer[threeD2oneD(float3(voxelPosition.x, voxelPosition.y - 2, voxelPosition.z))] = 1;
		maskClearBuffer[threeD2oneD(float3(voxelPosition.x + 2, voxelPosition.y, voxelPosition.z))] = 1;
		maskClearBuffer[threeD2oneD(float3(voxelPosition.x, voxelPosition.y, voxelPosition.z + 2))] = 1;
		maskClearBuffer[threeD2oneD(float3(voxelPosition.x, voxelPosition.y, voxelPosition.z - 2))] = 1;

		float4 mixedColor2 =
			(voxelGrid[float3(voxelPosition.x + 3, voxelPosition.y, voxelPosition.z)] +
				voxelGrid[float3(voxelPosition.x - 3, voxelPosition.y, voxelPosition.z)] +
				voxelGrid[float3(voxelPosition.x, voxelPosition.y + 3, voxelPosition.z)] +
				voxelGrid[float3(voxelPosition.x, voxelPosition.y - 3, voxelPosition.z)] +
				voxelGrid[float3(voxelPosition.x, voxelPosition.y, voxelPosition.z + 3)] +
				voxelGrid[float3(voxelPosition.x, voxelPosition.y, voxelPosition.z - 3)]) / 12;

		maskClearBuffer[threeD2oneD(float3(voxelPosition.x + 3, voxelPosition.y, voxelPosition.z))] = 1;
		maskClearBuffer[threeD2oneD(float3(voxelPosition.x, voxelPosition.y + 3, voxelPosition.z))] = 1;
		maskClearBuffer[threeD2oneD(float3(voxelPosition.x, voxelPosition.y - 3, voxelPosition.z))] = 1;
		maskClearBuffer[threeD2oneD(float3(voxelPosition.x + 3, voxelPosition.y, voxelPosition.z))] = 1;
		maskClearBuffer[threeD2oneD(float3(voxelPosition.x, voxelPosition.y, voxelPosition.z + 3))] = 1;
		maskClearBuffer[threeD2oneD(float3(voxelPosition.x, voxelPosition.y, voxelPosition.z - 3))] = 1;

		float4 mixedColor = lerp(lerp(mixedColor0, lerp(mixedColor1, mixedColor2, 0.25), 0.25), mixedColor1, 0.25);

		newMixedColor =
			float4(mixedColor.rgb + lightingTexture[id.xy].rgb + (DecodeRGBAuint(lightMapBuffer[index]).rgb * emissiveIntensity) +
			(lightingTexture2[id.xy].rgb * (1 - shadowStrength).xxx) * 0.25,
				lightingTexture2[id.xy].a * occlusionGain);
	}
	else
	{
		newMixedColor =
			float4(voxelGrid[uint3(id.x, id.y, id.z)].rgb + lightingTexture[id.xy].rgb + (DecodeRGBAuint(lightMapBuffer[index]).rgb * emissiveIntensity) +
			(lightingTexture2[id.xy].rgb * (1 - shadowStrength).xxx) * 1,
				lightingTexture2[id.xy].a * occlusionGain);
	}
	float lumaThreshold = LUMA_THRESHOLD_FACTOR * (1.0f / max(positionTexture[id.xy].a * LUMA_DEPTH_FACTOR, 0.1f));
	float pixelLuma = GetLuma(newMixedColor.rgb);
	float currentVoxelLuma = GetLuma(voxelGrid[voxelPosition].rgb);
	float lumaDiff = abs(saturate(currentVoxelLuma - pixelLuma));

	if ((voxelGrid[voxelPosition].a == 0.0f) || ((lumaDiff < lumaThreshold) && (depthTexture[id.xy].a > positionTexture[id.xy].a)))
	{
		voxelGrid[voxelPosition] = 
			lerp(newMixedColor, voxelGrid[voxelPosition], positionTexture[id.xy].a);
	}
	maskClearBuffer[index].x = 1;
	
}

	