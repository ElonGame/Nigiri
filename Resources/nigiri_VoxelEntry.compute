// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Readable/Writable texture for storing the direct lighting and the occupied flag
uniform RWTexture3D<float4>			voxelGrid;

uniform RWStructuredBuffer<float>   voxelUpdateCounter;

uniform Texture3D<float4>			voxelInjectionGrid;

// Texture for storing the color with direct lighting
uniform Texture2D<float4>			lightingTexture;
uniform Texture2D<float4>			lightingTexture2;

uniform int							injectionTextureResolutionX;


// Texture for storing the world space position
Texture2D<float4>			positionTexture;

Texture2D<float4>			NoiseTexture;

// Variable representing the dimension of the voxel grid
uniform uint						voxelResolution;

// World-space boundary of the voxel grid
uniform float 						worldVolumeBoundary;

uniform float						shadowStrength;
uniform float						sunLightInjection;

#define unity_ColorSpaceLuminance half4(0.0396819152, 0.458021790, 0.00609653955, 1.0)

// Function to get position of voxel in the grid
inline uint3 GetVoxelPosition(float3 worldPosition)
{
	float3 encodedPosition = worldPosition / worldVolumeBoundary;
	encodedPosition += float3(1.0f, 1.0f, 1.0f);
	encodedPosition /= 2.0f;
	uint3 voxelPosition = (uint3)(encodedPosition * voxelResolution);
	return voxelPosition;
}

inline uint3 coordinateFromLinearIndex(uint index, uint res)
{
	return uint3(
		floor(index / (res * res)),
		floor((index / res) % res),
		index % res);
}

inline uint3 index1dTo3d(int index1d)
{
	//int res = 256; // resolution of the voxel grid
	int logRes = 8; // the log of the resolution (just a performance optimisation this way)
	// LogRes: 16 = 4, 32 = 5, 64 = 6, 128 = 7, 256 = 8, 512 = 9, etc...

	return uint3(index1d >> (logRes << 1),
		(index1d >> logRes) & (voxelResolution - 1),
		index1d & (voxelResolution - 1));
}

// 0
[numthreads(16, 16, 1)]
// Entry point of the voxelization compute shader
void CSMain(uint3 id : SV_DispatchThreadID, uint thread : SV_GroupIndex)
{
	float3 noiseCoord = NoiseTexture[id.xy].rgb;

	// Extract the pixel's depth
	float lindepth = positionTexture[id.xy].a;

	uint3 voxelPosition = GetVoxelPosition(positionTexture[id.xy].rgb);

	uint index = id.x * injectionTextureResolutionX + id.y;
	voxelUpdateCounter[index] += 0.1;

	//voxelGrid[voxelPosition] = voxelInjectionGrid[voxelPosition];
	//voxelUpdateCounter[index] = 0;


	if (voxelGrid[voxelPosition].r == 0 || voxelGrid[voxelPosition].g == 0 || voxelGrid[voxelPosition].b == 0)
	{
		voxelGrid[voxelPosition] = 
			float4(voxelInjectionGrid[voxelPosition] + 
			(lightingTexture[id.xy] + 
				((lightingTexture2[id.xy].rgb * (1 - shadowStrength))) * 0.5) * 0.75, lightingTexture2[id.xy].a);
	}
	else if ((voxelUpdateCounter[index] > lindepth + noiseCoord.x) && (lindepth < 0.999f))
	{

		float4 newMixedColor = 
			float4((voxelGrid[voxelPosition].rgb + (lightingTexture[id.xy].rgb + 
			((lightingTexture2[id.xy].rgb * (1 - shadowStrength))) * 0.5)) * 0.5, lightingTexture2[id.xy].a);

		voxelGrid[voxelPosition] = lerp(voxelInjectionGrid[voxelPosition] + newMixedColor, voxelGrid[voxelPosition], 0.98);
		voxelUpdateCounter[index] = 0;
	}
}

	