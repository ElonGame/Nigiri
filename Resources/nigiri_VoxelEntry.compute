// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Readable/Writable texture for storing the direct lighting and the occupied flag
uniform RWTexture3D<float4>			voxelGrid;

uniform RWStructuredBuffer<float>   voxelUpdateCounter;

uniform Texture3D<float4>			voxelInjectionGrid;
uniform Texture3D<float4>			voxelPropagatedGrid;

// Texture for storing the color with direct lighting
uniform Texture2D<float4>			lightingTexture;
uniform Texture2D<float4>			lightingTexture2;

uniform int							injectionTextureResolutionX;


// Texture for storing the world space position
Texture2D<float4>			positionTexture;

Texture2D<float4>			NoiseTexture;

// Variable representing the dimension of the voxel grid
uniform uint						voxelResolution;

// World-space boundary of the voxel grid
uniform float 						worldVolumeBoundary;

#define unity_ColorSpaceLuminance half4(0.0396819152, 0.458021790, 0.00609653955, 1.0)

// Function to get position of voxel in the grid
inline uint3 GetVoxelPosition(float3 worldPosition)
{
	float3 encodedPosition = worldPosition / worldVolumeBoundary;
	encodedPosition += float3(1.0f, 1.0f, 1.0f);
	encodedPosition /= 2.0f;
	uint3 voxelPosition = (uint3)(encodedPosition * voxelResolution);
	return voxelPosition;
}

inline uint3 coordinateFromLinearIndex(uint index, uint res)
{
	return uint3(
		floor(index / (res * res)),
		floor((index / res) % res),
		index % res);
}

inline uint3 index1dTo3d(int index1d)
{
	int res = 256; // resolution of the voxel grid
	int logRes = 8; // the log of the resolution (just a performance optimisation this way)
	// LogRes: 16 = 4, 32 = 5, 64 = 6, 128 = 7, 256 = 8, 512 = 9, etc...

	return uint3(index1d >> (logRes << 1),
		(index1d >> logRes) & (res - 1),
		index1d & (res - 1));
}

float3 rgb2hsv(float3 c)
{
	float4 k = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	float4 p = lerp(float4(c.bg, k.wz), float4(c.gb, k.xy), step(c.b, c.g));
	float4 q = lerp(float4(p.xyw, c.r), float4(c.r, p.yzx), step(p.x, c.r));

	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;

	return float3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

float3 hsv2rgb(float3 c)
{
	float4 k = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	float3 p = abs(frac(c.xxx + k.xyz) * 6.0 - k.www);
	return c.z * lerp(k.xxx, saturate(p - k.xxx), c.y);
}

float4 DecodeRGBAuint(uint value)
{
	uint ai = value & 0x0000007F;
	uint vi = (value / 0x00000080) & 0x000007FF;
	uint si = (value / 0x00040000) & 0x0000007F;
	uint hi = value / 0x02000000;

	float h = float(hi) / 127.0;
	float s = float(si) / 127.0;
	float v = (float(vi) / 2047.0) * 10.0;
	float a = ai * 2.0;

	v = pow(v, 3.0);

	float3 color = hsv2rgb(float3(h, s, v));

	return float4(color.rgb, a);
}

uint EncodeRGBAuint(float4 color)
{
	//7[HHHHHHH] 7[SSSSSSS] 11[VVVVVVVVVVV] 7[AAAAAAAA]
	float3 hsv = rgb2hsv(color.rgb);
	hsv.z = pow(hsv.z, 1.0 / 3.0);

	uint result = 0;

	uint a = min(127, uint(color.a / 2.0));
	uint v = min(2047, uint((hsv.z / 10.0) * 2047));
	uint s = uint(hsv.y * 127);
	uint h = uint(hsv.x * 127);

	result += a;
	result += v * 0x00000080; // << 7
	result += s * 0x00040000; // << 18
	result += h * 0x02000000; // << 25

	return result;
}


[numthreads(16, 16, 1)]
// Entry point of the voxelization compute shader
void CSMain(uint3 id : SV_DispatchThreadID, uint thread : SV_GroupIndex)
{
	float3 noiseCoord = NoiseTexture[id.xy].rgb;

	// Extract the pixel's depth
	float lindepth = positionTexture[id.xy].a;

	uint3 voxelPosition = GetVoxelPosition(positionTexture[id.xy].rgb);
	uint3 voxelPosition2 = positionTexture[id.xy].rgb * voxelResolution;

	uint index = id.x * injectionTextureResolutionX + id.y;
	voxelUpdateCounter[index] += 0.1;

	//voxelGrid[voxelPosition] = voxelInjectionGrid[voxelPosition];
	//voxelUpdateCounter[index] = 0;

	if (voxelGrid[voxelPosition].r == 0 || voxelGrid[voxelPosition].g == 0 || voxelGrid[voxelPosition].b == 0)
	{
		voxelGrid[voxelPosition] = voxelInjectionGrid[voxelPosition] +
			float4(lightingTexture2[id.xy].rgb, max(1, dot(lightingTexture[id.xy].rgb, unity_ColorSpaceLuminance.rgb)));
	}
	else if ((voxelUpdateCounter[index] > lindepth + noiseCoord.x) && (lindepth < 0.999f))
	{
		float4 newMixedColor = voxelGrid[voxelPosition] + float4(lightingTexture2[id.xy].rgb, max(1, dot(lightingTexture[id.xy].rgb, 1 - unity_ColorSpaceLuminance.rgb)));

		voxelGrid[voxelPosition] = lerp(voxelInjectionGrid[voxelPosition] + newMixedColor, voxelGrid[voxelPosition], 0.995);
		voxelUpdateCounter[index] = 0;	
	}

}