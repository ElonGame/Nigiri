#pragma kernel CSMain
#pragma kernel CSMainGaussian

RWTexture3D<float4> Destination;
Texture3D<float4> Source;

SamplerState _LinearClamp;
SamplerState _PointClamp;

int destinationRes;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    for (int i = 0; i < destinationRes; i++)
    {
        float3 fcoord = float3((float)id.x / destinationRes, (float)id.y / destinationRes, (float)i / destinationRes);
        float texel = 1.0 / destinationRes;

        float4 tex = Source.SampleLevel(_LinearClamp, fcoord + texel * 0.5, 0.0f);

		Destination[uint3(id.xy, i)] = tex;
    }
}

[numthreads(8,8,1)]
void CSMainGaussian (uint3 id : SV_DispatchThreadID)
{

    float3 offsets0[8] = 
    {
        float3(2.0, 2.0, 2.0),
        float3(2.0, 2.0, -2.0),
        float3(2.0, -2.0, 2.0),
        float3(2.0, -2.0, -2.0),
        float3(-2.0, 2.0, 2.0),
        float3(-2.0, 2.0, -2.0),
        float3(-2.0, -2.0, 2.0),
        float3(-2.0, -2.0, -2.0)
    };

	float3 offsets1[8] =
	{
		float3(4.0, 4.0, 4.0),
		float3(4.0, 4.0, -4.0),
		float3(4.0, -4.0, 4.0),
		float3(4.0, -4.0, -4.0),
		float3(-4.0, 4.0, 4.0),
		float3(-4.0, 4.0, -4.0),
		float3(-4.0, -4.0, 4.0),
		float3(-4.0, -4.0, -4.0)
	};

    for (int i = 0; i < destinationRes; i++)
    {
        float3 fcoord = float3((float)id.x / destinationRes, (float)id.y / destinationRes, (float)i / destinationRes);
        float texel = 1.0 / destinationRes;

        float4 tex0 = float4(0,0,0,0);
		float4 tex1 = float4(0, 0, 0, 0);

        int c = 0;

        for (int j = 0; j < 8; j++)
        {
            float3 offset = float3(0, 0, 0);

            offset = offsets0[j];
            tex0 += Source.SampleLevel(_LinearClamp, fcoord + texel * 0.5 + offset * texel * 0.5, 0.0);

			offset = offsets1[j];
			tex1 += Source.SampleLevel(_LinearClamp, fcoord + texel * 0.5 + offset * texel * 0.5, 0.0);


            c++;
        }

        tex0 /= c;
		tex1 /= c;     

		Destination[uint3(id.xy, i)] = lerp(tex0, tex1, 0.25);
    }
}
