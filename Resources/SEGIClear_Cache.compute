#pragma kernel CSMain
#pragma kernel CSMain2 // Staggered Clear Buffer
#pragma kernel CSMain3 // Clear Buffer
#pragma kernel CSMain4

RWTexture3D<uint> RG0;

uniform RWStructuredBuffer<float3> RG1;

uint Resolution;

uint zStagger;


// 0
[numthreads(16, 16, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	for (uint i = 0; i < Resolution; i++)
	{
		RG0[uint3(id.xy, i)] = 0;
	}
}


// 1
[numthreads(16, 16, 1)]
void CSMain2(uint3 id : SV_DispatchThreadID)
{
	uint slice = Resolution / 16;
	uint currentZ;

	[unroll(32)]
	for (uint i = 0; i < slice; i++)
	{
		currentZ = zStagger * slice - slice + i;
		uint index = id.x * Resolution * Resolution + id.y * Resolution + currentZ;
		RG1[index] = float3(0, 0, 0);
	}
}

// 2
[numthreads(16, 16, 1)]
void CSMain3(uint3 id : SV_DispatchThreadID)
{
	for (uint i = 0; i < Resolution; i++)
	{
		uint index = id.x * Resolution * Resolution + id.y * Resolution + i;
		RG1[index] = float3(0.5, 0.5, 0.5);
	}
}

// 3
[numthreads(16, 16, 1)]
void CSMain4(uint3 id : SV_DispatchThreadID)
{
	for (uint i = 0; i < Resolution; i++)
	{
		RG0[uint3(id.xy, i)] *= 0.5;
	}
}
